DECLARE PLUGIN "coq-quickchick.plugin"

{
(*

THIS FILE IS PREPROCESSED USING cppo
MAKE SURE TO EDIT THE .cppo SOURCE OF THIS FILE RATHER THAN THE GENERATED RESULT

*)


open GenericLib
open Stdarg
open Error
open Pp
open Constrexpr
open Libnames

module CtrMap = Map.Make(Ord_ctr)

type weight_ast = 
  | WNum of int
  | WSize 

let weight_ast_to_string = function
  | WNum n -> string_of_int n
  | WSize  -> "size"
  
let weight_env : weight_ast CtrMap.t ref =
  Summary.ref ~name:"QC_weight_environ" CtrMap.empty

let weight_env_to_string () =
  let all = CtrMap.fold (fun ctr w acc -> (Printf.sprintf "%s : %s\n" 
                                                          (constructor_to_string ctr) 
                                                          (weight_ast_to_string w))::acc) 
                        !weight_env [] in
  String.concat "" all

let register_weights (l : (constructor * weight_ast) list) =
  List.iter (fun (c,w) -> weight_env := CtrMap.add c w !weight_env) l

let convert_constr_to_weight c = 
  match c.CAst.v with
  | CPrim (Number (NumTok.SPlus, i)) ->
      (match NumTok.Unsigned.to_nat i with
      | Some n -> WNum (int_of_string n)
      | None -> failwith "QC: Numeric weights should be positive integers."
      )
  | CRef (r, _) ->
     if string_of_qualid r = "size" then WSize
     else failwith "QC: Expected number or 'size'."
  | _ -> failwith "QC: match failure."

let convert_constr_to_cw_pair c : (constructor * weight_ast) = 
  match c.CAst.v with
  | CNotation (_, _, ([a],[[b]],_,_)) ->
      let ctr = 
        match a with 
        | { CAst.v = CRef (r, _); _ } -> injectCtr (string_of_qualid r)
        | _ -> failwith "First argument should be a constructor name"
      in 
      let w = convert_constr_to_weight b in
      (ctr,w)
  | _ -> failwith "Not a pair?"

#if COQ_VERSION >= (8, 16, 0)
let register_weights_object =
  Libobject.declare_object
    {(Libobject.default_object ("QC_register_weights")) with
      Libobject.cache_function = (fun ws -> register_weights ws);
      Libobject.load_function = (fun _ ws -> register_weights ws)}

let add_weights w = Lib.add_leaf (register_weights_object w)
#else
let register_weights_object = 
  Libobject.declare_object
    {(Libobject.default_object ("QC_register_weights")) with
      Libobject.cache_function = (fun (_,ws) -> register_weights ws);
      Libobject.load_function = (fun _ (_,ws) -> register_weights ws)}

let add_weights w = Lib.add_anonymous_leaf (register_weights_object w)
#endif
let lookup_weight ctr size_var = 
  try match CtrMap.find ctr !weight_env with
      | WNum n -> gInt n
      | WSize  -> gSucc (gVar (size_var))
  with Not_found -> gInt 1

}

VERNAC COMMAND EXTEND QuickChickWeights CLASSIFIED AS SIDEFF
  | ["QuickChickWeights" constr(c)] -> 
     {
       let weight_assocs = 
         match c.CAst.v with
         | CNotation (_, _, ([a],[b],_,_)) ->
             let c = convert_constr_to_cw_pair a in
             let cs = List.map convert_constr_to_cw_pair b in
             c :: cs
         | _ -> failwith "QC: Expected list of constructor -> weights"
       in 
       msg_debug (str "Current weights: " ++ fnl ());
       msg_debug (str (weight_env_to_string ()) ++ fnl ());
       add_weights weight_assocs
     }
END

(*
let s1' = Names.string_of_id s1 in
       let s2' = Names.string_of_id s2 in 
       Lib.add_anonymous_leaf (set_debug_flag s1' (s1',s2')) ]
 *)
